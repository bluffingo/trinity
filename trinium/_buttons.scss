@use "sass:color";

@mixin button() {
    padding: 8px 12px;
    text-align: center;
    border-radius: 4px;
    color: white;
    font-family: $font;
    display: inline-block;
    cursor: pointer;
    text-decoration: none;
    font-weight: normal;
    line-height: 1em;
    user-select: none;
    //transition: background-color 0.1s ease;

    @if $theme =="default" {
        background-repeat: repeat-x;
        box-shadow: inset 0 1px 0 rgba(white, 0.2), 0 1px 2px rgba(black, 0.1);
    }

    @else if $theme =="flat" {
        border: none;
    }
}

@mixin button-variant($value) {
    $text-color: contrast-color($value, black, white);
    $shadow-color: contrast-color($value, white, black);

    $border-color: color.adjust(color.adjust($value, $lightness: -7.5%), $hue: 2deg);

    @if $color-scheme =="dark" {
        $border-color: color.adjust(color.adjust($value, $lightness: 10%), $hue: 4deg);
    }

    @if $theme =="default" {
        border: 1px solid $border-color;
        background-image: linear-gradient(color.adjust($value, $lightness: 5%),
                color.adjust(color.adjust($value, $lightness: -4%), $hue: 1deg));
        text-shadow: 0 -1px 0 rgba($shadow-color, 0.4);
    }

    background-color: $value;
    color: $text-color;

    &:hover {
        @if $theme =="default" {
            background-color: color.adjust($value, $lightness: 10%);
            background-image: linear-gradient(color.adjust(color.adjust($value, $lightness: 10%), $hue: 1deg),
                    color.adjust($value, $lightness: 2%));
        }

        @else if $theme =="flat" {
            background-color: color.adjust($value, $lightness: if(lightness($value) > 50%, -5%, 5%));
        }
    }

    &:active {
        @if $theme =="default" {
            background-color: color.adjust($value, $lightness: -5%);
            background-image: linear-gradient(color.adjust(color.adjust($value, $lightness: -5%), $hue: 1deg),
                    color.adjust($value, $lightness: -10%));
            box-shadow: inset 0 2px 4px rgba(black, 0.15), 0 1px 2px rgba(black, 0.05);
        }

        @else if $theme =="flat" {
            background-color: color.adjust($value, $lightness: if(lightness($value) > 50%, -10%, 10%));
        }
    }
}

.button {
    @include button();

    &:hover {
        text-decoration: none;
    }

    &.button-hamburger {
        padding: 0;
        display: flex;
    }

    &.button-caret {
        padding: 3px 4px;
    }

    &.button-menu {
        display: inline-flex;
        gap: 0.5em;
    }

    &.button-transparent {
        background: none;

        &:not(:hover):not(:active) {
            box-shadow: none;
            border-color: #0000;
        }
    }

    &.button-small {
        font-size: 0.9em;

        @if $theme =="flat" {
            padding: 5px 9px;
        }

        @else {
            padding: 4px 8px;
        }
    }

    &.button-big {
        font-size: 15px;
        padding: 9px 15px;
        border-radius: 5px;
    }

    &.button-huge {
        font-size: 24px;
        padding: 1rem 1.5rem;
        border-radius: 7px;
    }

    &.button-login {
        @include responsive('tiny') {
            width: 100%;
        }

        @include responsive('small') {
            width: 100%;
        }

        @include responsive('medium') {
            width: inherit;
        }
    }
}

@each $color, $value in $color-map {
    .button-#{$color} {
        @include button-variant($value);
    }
}

input[type=file]::file-selector-button,
input[type=file]::-webkit-file-upload-button {
    @include button();
    @include button-variant($secondary);
}